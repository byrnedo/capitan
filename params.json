{"name":"Capitan","tagline":"Capitan is a tool for managing multiple Docker containers","body":"# Capitan\r\n\r\nCapitan is a tool for managing multiple Docker containers based largely on [crowdr](https://github.com/polonskiy/crowdr)\r\n\r\nCapitan is only a wrapper around the docker cli tool, no api usage whatsoever.\r\nThis means it will basically work with all versions of docker.\r\n\r\n## Why not docker-compose?\r\n\r\n1. lack of variables\r\n2. options support is always behind actual docker version\r\n3. up restarts containers in wrong order\r\n4. no hooks system\r\n5. hasslefree replacement for non x86/x86_64 architectures\r\n\r\n## Why not crowdr?\r\n\r\nWritten totally in bash. I love bash but I personally feel safer with go. That is all.\r\n\r\n## Capitan Features\r\n\r\n1. Shell Support - Config is read from stdout of a shell command. Extremely flexible\r\n2. Hooks - hooks for before and after every intrusive action\r\n3. Predictable run sequence - containers started in order defined\r\n4. Future proof - options are passed through on most commands to docker cli, very simple.\r\n\r\n## Commands\r\n\r\n### Invasive commands\r\n\r\n- `capitan up`\t\tCreate then run or update containers \r\n    - Recreates if:\r\n        1. If newer image is found it will remove the old container and run a new one\r\n        2. Container config has changed\r\n    - Starts stopped containers\r\n\r\n    - Optionally can attach to output using `--attach|-a` flag.\r\n    \r\n- `capitan start`   Start stopped containers\r\n\r\n    - Optionally can attach to output using `--attach|-a` flag.\r\n\r\n- `capitan restart`\tRestart containers\r\n    \r\n    - Further arguments passed through to docker, example `capitan start -t 5`\r\n\r\n- `capitan stop`\tStop running containers\r\n    \r\n    - Further arguments passed through to docker, example `capitan stop -t 5`\r\n    \r\n- `capitan kill`\tKill running containers using SIGKILL or a specified signal\r\n    \r\n    - Further arguments passed through to docker, example `capitan kill --signal KILL`\r\n\r\n- `capitan rm`\t\tRemove stopped containers\r\n    \r\n    - Further arguments passed through to docker, example `capitan rm -f`\r\n    \r\n### Non invasive commands\r\n    \r\n- `capitan ps`\t\tShow container status\r\n    \r\n    - Further arguments passed through to docker, example `capitan ps -a`\r\n\r\n- `capitan ip`\t\tShow container ip addresses\r\n\r\n- `capitan logs`    Follow container logs\r\n\r\n- `capitan pull`    Pull images for all containers\r\n\r\n- `capitan build`   Build any containers with 'build' flag set (WIP)\r\n\r\n     \r\n## Global options\r\n     --cmd, -c \"./capitan.cfg.sh\"\tcommand used to obtain config\r\n     --debug, -d\t\t\t\t    print extra log messages\r\n     --dry-run, --dry\t\t\t    preview outcome, no changes will be made\r\n     --help, -h\t\t\t\t        show help\r\n     --version, -v\t\t\t        print the version\r\n \r\n## Configuration\r\n\r\nServices are described in the config output which is read from stdout.\r\nYou could use any command which generates a valid config. It doesn't have to be a bash script like in the example.\r\n\r\n`capitan` by default runs the command `./capitan.cfg.sh` in the current directory to get the config. This can be customized with `-c` flag.\r\n\r\nThe output format is:\r\n\r\n    CONTAINER_NAME COMMAND ARGS\r\n \r\nAll commands are passed through to docker cli as `--COMMAND` EXCEPT the following:\r\n\r\n#### `build`\r\nThis allows a path to be given for a dockerfile.\r\n\r\n#### `hook`\r\nAllows for a custom shell command to be evaluated at the following points:\r\n\r\n- Before/After Run (`before.run`, `after.run`)\r\n    - This occurs during the `up` command\r\n- Before/After Start (`before.start`, `after.start`)\r\n    - This will occur in the `up`, `start` and `restart` command\r\n- Before/After Stop (`before.stop`, `after.stop`)\r\n    - This will occur in the `stop` command only\r\n- Before/After Kill (`before.kill`, `after.kill`)\r\n    - This will occur in the `kill` command only\r\n- Before/After Rm (`before.rm`, `after.rm`)\r\n    - This will occur in the `up` and `rm` command\r\n       \r\n*NOTE* hooks do not conform exactly to each command. Example: an `up` command may `rm` and then `run` a container OR just `start` a stopped container.\r\n    \r\n\r\n####`global project`\r\nThe project name, defaults to current working directory\r\n\r\n#### `global project_sep`\r\nString to use to create container name from `project` and name specified in config\r\n\r\n\r\n### Example Config :\r\n    \r\n    #!/bin/bash\r\n    PREFIX=dev\r\n    \r\n    cat <<EOF\r\n    #\r\n    # General redis container\r\n    #\r\n    redis image redis:latest\r\n    redis hostname ${PREFIX}_redis\r\n    redis publish 6379\r\n    redis hook after.run sleep 10\r\n    redis hook after.start sleep 10\r\n    \r\n    #\r\n    # General mongodb container\r\n    #\r\n    mongo image mongo:latest\r\n    mongo command mongod --smallfiles\r\n    mongo hostname ${PREFIX}_mongo\r\n    mongo publish 27017\r\n    \r\n    #\r\n    # My app\r\n    #\r\n    app build ./\r\n    app publish 80\r\n    app link redis\r\n    app link mongo:mongodb\r\n    EOF\r\n\r\n## Roadmap\r\n\r\n1. Tests\r\n2. Scaling (multiple instances of same container)\r\n3. More efficient `up` logic\r\n4. Helpful aliases in shell env.\r\n5. More flexible `build` command\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}