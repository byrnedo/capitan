{"name":"Capitan","tagline":"Capitan is a tool for managing multiple Docker containers","body":"# Capitan\r\n\r\n[![GoDoc](https://godoc.org/github.com/byrnedo/capitan?status.svg)](https://godoc.org/github.com/byrnedo/capitan)\r\n\r\nCapitan is a tool for managing multiple Docker containers based largely on [crowdr](https://github.com/polonskiy/crowdr)\r\n\r\nCapitan is only a wrapper around the docker cli tool, no api usage whatsoever (well... an `inspect` command here and there).\r\nThis means it will basically work with all versions of docker.\r\n\r\n![Capitan showcase]\r\n(output.gif)\r\n\r\n## Installation\r\n\r\nHead over to the [releases](https://github.com/byrnedo/capitan/releases) page to download a pre-build binary or deb file.\r\n\r\nOr using go:\r\n\r\n    go get github.com/byrnedo/capitan\r\n\r\n## Capitan Features\r\n\r\n1. Shell Support - Config is read from stdout of a shell command. Extremely flexible\r\n2. Hooks - hooks for before and after every intrusive action\r\n3. Predictable run sequence - containers started in order defined\r\n4. Future proof - options are passed through on most commands to docker cli, very simple.\r\n\r\n## Commands\r\n\r\n### Invasive commands\r\n\r\n#### `capitan up`\r\nCreate then run or update containers \r\nRecreates if:\r\n\r\n1. ~~If newer image is found it will remove the old container and run a new one~~ No longer does this as capitan can't know which node to check images for when talking to a swarm.\r\n2. Container config has changed\r\n    \r\nStarts stopped containers\r\n\r\n    capitan up\r\n    # Optionally can attach to output using `--attach|-a` flag.\r\n    capitan up -a\r\n\r\n#### `capitan create`\r\nCreate but don't run containers\r\n\r\n    capitan create\r\n    \r\n#### `capitan start`\r\nStart stopped containers\r\n\r\n    capitan start\r\n    # Optionally can attach to output using `--attach|-a` flag.\r\n    capitan start -a\r\n    \r\n#### `capitan scale`\r\nStart or stop instances of a container until required amount are running\r\n\r\n    # run 5 instances of mysql\r\n    capitan scale mysql 5\r\n    \r\nNOTE: for containers started via this command to be accepted by further commands, the config output must be altered to state the required instances\r\n\r\n##### `capitan restart`\t\r\nRestart containers\r\n    \r\n    capitan restart\r\n    # Further arguments passed through to docker, example `capitan start -t 5`\r\n    capitan restart -t 10\r\n\r\n##### `capitan stop`\t\r\nStop running containers\r\n    \r\n    capitan stop\r\n    # Further arguments passed through to docker, example `capitan stop -t 5`\r\n    capitan stop -t 10\r\n    \r\n##### `capitan kill`\t\r\nKill running containers using SIGKILL or a specified signal\r\n    \r\n    capitan kill\r\n    # Further arguments passed through to docker, example `capitan kill --signal KILL`\r\n    capitan kill --signal KILL\r\n\r\n##### `capitan rm`\t\t\r\nRemove stopped containers\r\n    \r\n    capitan rm\r\n    # Further arguments passed through to docker, example `capitan rm -f`\r\n    capitan rm -fv\r\n    \r\n### Non invasive commands\r\n    \r\n##### `capitan ps`\r\nShow container status\r\n    \r\n    - Further arguments passed through to docker, example `capitan ps -a`\r\n\r\n##### `capitan ip`\r\nShow container ip addresses\r\n\r\n##### `capitan logs`\r\nFollow container logs\r\n\r\n##### `capitan pull`\r\nPull images for all containers\r\n\r\n##### `capitan build`\r\nBuild any containers with 'build' flag set (WIP)\r\n\r\n\r\n## Configuration\r\n\r\n     \r\n### Global options\r\n     --cmd, -c \"./capitan.cfg.sh\"\tcommand used to obtain config\r\n     --debug, -d\t\t\t\t    print extra log messages\r\n     --dry-run, --dry\t\t\t    preview outcome, no changes will be made\r\n     --help, -h\t\t\t\t        show help\r\n     --version, -v\t\t\t        print the version\r\n\r\n### Config file/output\r\n\r\nService config is read from stdout of the command defined with `--cmd` .\r\n\r\n`capitan` by default runs the command `./capitan.cfg.sh` in the current directory to get the config. This can be customized with `-c` flag.\r\n\r\nYou could use any command which generates a valid config. It doesn't have to be a bash script like in the example or default.\r\n\r\nThe output format must be:\r\n\r\n    CONTAINER_NAME COMMAND [ARGS...]\r\n \r\nAll commands are passed through to docker cli as `--COMMAND` EXCEPT the following:\r\n\r\n#### `build`\r\nThis allows a path to be given for a dockerfile.\r\n\r\n#### `hook`\r\nAllows for a custom shell command to be evaluated at the following points:\r\n\r\n- Before/After Run (`before.run`, `after.run`)\r\n    - This occurs during the `up` command\r\n- Before/After Start (`before.start`, `after.start`)\r\n    - This will occur in the `up`, `start` and `restart` command\r\n- Before/After Stop (`before.stop`, `after.stop`)\r\n    - This will occur in the `stop` command only\r\n- Before/After Kill (`before.kill`, `after.kill`)\r\n    - This will occur in the `kill` command only\r\n- Before/After Rm (`before.rm`, `after.rm`)\r\n    - This will occur in the `up` and `rm` command\r\n       \r\n*NOTE* hooks do not conform exactly to each command. Example: an `up` command may `rm` and then `run` a container OR just `start` a stopped container.\r\n\r\n#### `scale`\r\nNumber of instances of the container to run. Default is 1.\r\n\r\nNOTE: this is untested with links ( I don't use links )\r\n\r\n#### `link`\r\nAn attempt to resolve a link to the first instance of a container is made. Otherwise the unresolved name is used.\r\n\r\nWARNING: When scaling, if the link resolves to a container defined in capitan's config, it will always resolve to the first instance.\r\nFor example: `app link mycontainer:some-alias` will always resolve to `<project>_mycontainer_1`\r\n\r\n#### `volumes-from`\r\n\r\nAn attempt to resolve a volume-from arg to the first instance of a container is made. Otherwise the unresolved name is used.\r\n\r\nWARNING: When scaling, if the container name resolves to a container defined in capitan's config, it will always resolve to the first instance.\r\nFor example: `app volumes-from mycontainer` will always resolve to `<project>_mycontainer_1`\r\n\r\n####`global project`\r\nThe project name, defaults to current working directory\r\n\r\n#### `global project_sep`\r\nString to use to create container name from `project` and name specified in config\r\n\r\n### Environment Variables \r\n\r\nThe following environment variables are available when creating the containers and when running hooks\r\n\r\n    # container name\r\n    CAPITAN_CONTAINER_NAME\r\n    # container type \r\n    CAPITAN_CONTAINER_SERVICE_TYPE\r\n    # instance of this type,eg if you have scale = 5 then each container will have their own instance number from 1 -> 5\r\n    CAPITAN_CONTAINER_INSTANCE_NUMBER\r\n    # the project name\r\n    CAPITAN_PROJECT_NAME\r\n    \r\nThe following environment variables are only available to hook scripts\r\n\r\n    CAPITAN_HOOK_NAME\r\n\r\nFor example, following `capitan.cfg.sh`\r\n\r\n    #!/bin/bash\r\n\r\n    cat <<EOF\r\n    global project test\r\n\r\n    mysql name mymysql\r\n    mysql label containerName=\\$CAPITAN_CONTAINER_NAME\r\n    mysql label containerServiceName=\\$CAPITAN_CONTAINER_SERVICE_NAME\r\n    mysql label containerInstanceNumber=\\$CAPITAN_CONTAINER_INSTANCE_NUMBER\r\n    mysql label projectName=\\$CAPITAN_PROJECT_NAME\r\n    mysql hook after.run echo \"hook: \\$CAPITAN_HOOK_NAME: ran \\$CAPITAN_CONTAINER_NAME in project \\$CAPITAN_PROJECT_NAME\"\r\n    EOF\r\n\r\nWould result in the following run command:\r\n\r\n    docker run -d --name test_mysql_1 \r\n        --label containerName=test_mysql_1 \r\n        --label containerServiceName=mysql\r\n        --label containerInstanceNumber=1\r\n        --label projectName=test\r\n\r\nAnd the following hook ouput\r\n\r\n    Running test_mysql_1\r\n    34e7fffb937c3154c2a963ee605c7958404aa5d80519db4ef3d2a80a06974021\r\n    hook: after.run: ran test_mysql_1 in project test\r\n\r\nNote that the `$` must be escaped if using HEREDOC or double quotes in bash.\r\n\r\n\r\n### Example Config\r\n\r\nCheck out [dev-stack](https://github.com/byrnedo/dev-stack) for an example. \r\nClone it and just run `capitan --dry up`.\r\n\r\nOr check out the `./example` dir.\r\n\r\nAlso, here's something to whet your appetite:\r\n    \r\n    #!/bin/bash\r\n    PREFIX=dev\r\n    \r\n    cat <<EOF\r\n    #\r\n    # General redis container\r\n    #\r\n    redis image redis:latest\r\n    redis hostname ${PREFIX}_redis\r\n    redis publish 6379\r\n    redis hook after.run echo \"look everyone, I ran \\$CAPITAN_CONTAINER_NAME\" && sleep 3\r\n    redis hook after.start sleep 3\r\n    \r\n    #\r\n    # General mongodb container\r\n    #\r\n    mongo image mongo:latest\r\n    mongo command mongod --smallfiles\r\n    mongo hostname ${PREFIX}_mongo\r\n    mongo publish 27017\r\n    \r\n    #\r\n    # My app\r\n    #\r\n    app build ./\r\n    app publish 80\r\n    app link redis\r\n    app link mongo:mongodb\r\n    EOF\r\n\r\n## Roadmap\r\n\r\n1. Tests\r\n2. More efficient `up` logic\r\n3. Helpful aliases in shell env.\r\n4. More flexible `build` command\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}